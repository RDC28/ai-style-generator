import os
import base64
import json
import traceback
from flask import Flask, request, render_template, Response
from flask_cors import CORS
from dotenv import load_dotenv
from google import genai  # Official SDK

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app)

client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

PROMPT = (
    "Take the person in this image and place them in a sharp, modern tuxedo. "
    "Apply a high-contrast, professional-grade black and white filter to the entire photograph. "
    "The background should be a simple, elegant, dark studio backdrop. "
    "Ensure the final image is photorealistic and maintains the person's facial features accurately. "
    "The lighting should be dramatic, like a classic portrait. Do not add any text or watermarks."
)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/generate", methods=["POST"])
def generate():
    try:
        image_file = request.files["photo"]
        image_bytes = image_file.read()
        image_b64 = base64.b64encode(image_bytes).decode("utf-8")
        input_mime = image_file.mimetype or "image/png"

        contents = {
            "parts": [
                {
                    "inlineData": {"data": image_b64, "mimeType": input_mime}
                },
                {
                    "text": PROMPT
                }
            ]
        }

        print("Request contents to Gemini API:")
        print(json.dumps(contents, indent=2))

        response = client.models.generate_content(
            model="gemini-2.5-flash-image-preview",
            contents=contents,
            config={
                "responseModalities": ["IMAGE", "TEXT"]
            }
        )

        print("Raw response from Gemini API:")
        print(response)

        if hasattr(response, "candidates") and response.candidates:
            parts = response.candidates[0].content.parts
            for part in parts:
                inline = getattr(part, "inlineData", None)
                if inline and getattr(inline, "data", None):
                    data = json.dumps({"image": inline.data})
                    return Response(data, status=200, mimetype="application/json")

        error_data = json.dumps({"error": "No image was generated by the AI."})
        return Response(error_data, status=500, mimetype="application/json")

    except Exception as e:
        # Print full traceback to help debug
        traceback.print_exc()
        error_data = json.dumps({"error": f"Failed to generate image due to an API error: {str(e)}"})
        return Response(error_data, status=500, mimetype="application/json")

if __name__ == "__main__":
    app.run(debug=True)